var gulp=require('gulp');   //引入gulpvar $=require('gulp-load-plugins')();   //引入该文件后，其他文件插件直接可以实例化，不再需要单独引入var imagemin=require('gulp-imagemin');  //引入图片压缩插件var open=require('open');   //自动打开浏览器var app={                   //目录变量赋值    src:"src/",    dev:"build/",    prd:"dist/"};gulp.task('lib',function () {       //引用外部库操作    gulp.src('bower_components/**/*.js')        .pipe(gulp.dest(app.dev+'vendor'))        .pipe(gulp.dest(app.prd+'vendor'))        .pipe($.connect.reload())});gulp.task('html',function () {  //html相关操作    var options = {        removeComments: false,//清除HTML注释        collapseWhitespace: true,//压缩HTML        collapseBooleanAttributes: true,//省略布尔属性的值 <input checked="true"/> ==> <input />        removeEmptyAttributes: true,//删除所有空格作属性值 <input id="" /> ==> <input />        removeScriptTypeAttributes: true,//删除<script>的type="text/javascript"        removeStyleLinkTypeAttributes: true,//删除<style>和<link>的type="text/css"        minifyJS: false,//压缩页面JS        minifyCSS: false//压缩页面CSS    };    var options1 = {        removeComments: true,//清除HTML注释        collapseWhitespace: true,//压缩HTML        collapseBooleanAttributes: true,//省略布尔属性的值 <input checked="true"/> ==> <input />        removeEmptyAttributes: true,//删除所有空格作属性值 <input id="" /> ==> <input />        removeScriptTypeAttributes: true,//删除<script>的type="text/javascript"        removeStyleLinkTypeAttributes: true,//删除<style>和<link>的type="text/css"        minifyJS: true,//压缩页面JS        minifyCSS: true//压缩页面CSS    };    gulp.src(app.src+'**/*.html')       //查询src目录下所有目录下的所有html文件        .pipe($.htmlmin(options))       //压缩，参数见变量        .pipe(gulp.dest(app.dev))       //将文件写入到build目录        .pipe($.htmlmin(options1))      //再次压缩        .pipe(gulp.dest(app.prd))       //将文件写到dist目录        .pipe($.connect.reload())       //刷新浏览器操作});gulp.task('css',function () {    gulp.src(app.src+'css/*.css')        .pipe(gulp.dest(app.dev+'css'))        .pipe($.cssmin())               //压缩css        .pipe(gulp.dest(app.prd+'css'))        .pipe($.connect.reload())});gulp.task('js',function () {    gulp.src(app.src+'js/**/*.js')        .pipe($.concat("app.js"))       //合并js        .pipe(gulp.dest(app.dev+'js'))        .pipe($.uglify())               //压缩js        .pipe(gulp.dest(app.prd+'js'))        .pipe($.connect.reload())});gulp.task('img',function () {    gulp.src(app.src+'img/**/*')        .pipe(imagemin())               //压缩img文件，如果报错可以尝试降低版本        .pipe(gulp.dest(app.dev+'img'))        .pipe(gulp.dest(app.prd+'img'))        .pipe($.connect.reload())});gulp.task('clean',function () {         //清空build、dist目录    gulp.src([app.dev,app.prd])        .pipe($.clean())});gulp.task('build',['lib','html','css','js','img']);gulp.task('serve',["build"],function () {       //执行build任务，并执行回调函数    $.connect.server({          //浏览器配置选项        root:[app.dev],         //打开根目录为build目录        livereload:true,        //监听重新加载        port:1234               //打开端口    });    open('http://localhost:1234');      //打开浏览器地址    gulp.watch(app.src+"js/**/*.js",["js"]);    gulp.watch(app.src+"css/*.css",["css"]);    gulp.watch(app.src+"img/*",["img"]);    gulp.watch(app.src+"**/*.html",["html"]);});gulp.task('default',['serve']);     //默认执行的操作，即输入gulp命令后执行的操作